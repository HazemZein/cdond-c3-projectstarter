version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
              type: string
              default: "${CIRCLE_WORKFLOW_ID:0:7}"
     
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "DESTROY STACKS"
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force  
            aws cloudformation delete-stack \
                       --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
                        --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: HazemZein" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $CIRCLE_WORKFLOW_ID
            echo $SUCCESS
            if [[ "${SUCCESS}" == 1 ]]; then
            echo "reverting migrations..."
            cd ~/project/backend
            ls
            npm install
            npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end test
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeoplebackend${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeoplefrontend${CIRCLE_WORKFLOW_ID:0:7}" \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Save the ip
            backendip=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)
            echo "$backendip"
            echo "$backendip" >> .circleci/ansible/inventory.txt
            
      - run:
          name: Ensure inventory saved
          command: |
            ls ~/
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:9b:66:00:29:8a:0a:dd:31:c1:a2:0c:be:db:3b:61"]
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure inventory loaded
          command: |
            cat ~/ansible/inventory.txt

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh
            ls
      - run:
          name: Set global vars
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment
            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install
            echo "running migrations" 
            npm run migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: HazemZein" --request PUT --data "1" \
             https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure   
     #retry  
      - destroy-environment
      - revert-migrations  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export API_URL=$(cat apiurl.txt)
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Echo S3 location (front-end)
          command: |
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c4:9b:66:00:29:8a:0a:dd:31:c1:a2:0c:be:db:3b:61"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm run build
            npm run prestart:prod
            cd ..
            echo "Contents  of the inventory.txt file is -------"
            cat ~/ansible/inventory.txt
            tar -cvf backend.tar backend
            cp backend.tar ~/backend.tar
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm busybox-extras
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)
            echo $BACKEND_IP
            echo "http://$BACKEND_IP:3030/api/status"
            if curl "${BACKEND_IP}:3030/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            # promote
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
            
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment        
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: HazemZein" \
             --request GET https://api.memstash.io/values/oldworkflowid)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - scan-backend:
#           requires: [build-backend]
        - deploy-infrastructure
#           requires: [test-frontend, test-backend, scan-frontend, scan-frontend]
#          filters:
#            branches:
#              only: [test-feature-branch]
        - configure-infrastructure:
            requires: [deploy-infrastructure]
        - run-migrations:
            requires: [configure-infrastructure]
        - deploy-frontend:
            requires: [run-migrations]
        - deploy-backend:
            requires: [run-migrations]
        - smoke-test:
            requires: [deploy-backend, deploy-frontend]
    #    - cloudfront-update:
    #        requires: [smoke-test]
    #   - cleanup:
    #       requires: [cloudfront-update]